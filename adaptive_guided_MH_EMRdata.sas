DATA leuk;
  DO i = 1 TO 36+198;
   IF i <=36 THEN y = 1; ELSE y=0;
   IF i <= 3 OR 37 <= i < 42 THEN x=1;ELSE x=0;
   OUTPUT;
  END;

PROC FREQ DATA = leuk;
 TABLE x*y;
RUN;

PROC LOGISTIC DATA = leuk DESC;
  MODEL y = x;
RUN;

* study proportion of outcomes for calculation of risk difference;
PROC MEANS DATA = leuk NOPRINT;
 VAR y;
 OUTPUT OUT= my MEAN=my;
DATA _null_;
 SET my;
 CALL SYMPUT("studyprop", PUT(my, best9.));
RUN;

%LET npar = 2;
%LET adapt_window = 100;
%LET adapt_phase = 1000;
%LET adapt_update = 10;
%LET adapt_start = 25;
%LET guided=1; *1 = yes, 0 = no;
%LET adaptive=1; *1 = yes, 0 = no;
%LET m = 1e5;

DATA post (KEEP = iter b: rd lp burn pa: _: sd:) ;
  CALL STREAMINIT(1231);
   nobs = 36+198;
   npar = &npar;
   *baseline risk parameters for risk difference calculation;
   poprisk = 4.8/100000;
   popodds = poprisk/(1-poprisk);
   studyodds = &studyprop/(1-&studyprop);
   *parameter arrays;
   ARRAY lb[&npar] (2 -3);
   ARRAY b[&npar];
   ARRAY c[&npar] (0 0);
   ARRAY pa[&npar] (1 1);
   ARRAY ga[&npar] (1 1);
   ARRAY sdb[&npar] (0.1 0.1);
   * helper arrays for adaptation;
   ARRAY _scale[&npar] ;
   ARRAY _rbl[&npar] ;
   ARRAY __rbl[&npar, &adapt_window] _TEMPORARY_ ; *vector of betas;
   ARRAY _pa[&npar] (0 0);
   ARRAY __pa[&npar, &adapt_window] _TEMPORARY_ ; *vector of acceptance probabilities for adaptation;
  DO iter = 1 TO &adapt_phase + &m;
    burn = (iter <= &adapt_phase);
	DO p = 1 TO npar;
      IF iter = 1 THEN _scale[p] = 1;
	  c[p] = 0;
	  *guiding;
	  ga[p] = &guided; *if not guided set to zero;
      * adaptation;
	  IF (iter < &adapt_update) OR &adaptive=0 THEN sdb[p] = 0.1;
	  IF (&adaptive=1) AND (iter < &adapt_phase) THEN DO;
	    *running mean estimate for target distribution;
	    DO a = &adapt_window TO 2 BY -1;
         __rbl[p,a] = __rbl[p,a-1];
		 __pa[p,a] = __pa[p,a-1];
	    END;
		__pa[p,a] = MAX(.01, MIN(pa[p], 1));
	    __rbl[p,1] = lb[p];
	    _rbl[p] = 0;
	    _pa[p] = 0;
        DO a = 1 TO &adapt_window;
          _rbl[p] = SUM(_rbl[p],__rbl[p,a]/MIN(iter, &adapt_window));
          _pa[p] = SUM(_pa[p],__pa[p,a]/MIN(iter, &adapt_window));
	    END;
	  END;
	  IF (&adaptive=1) AND (&adapt_start < iter < &adapt_phase) THEN DO;
	    * running root covariance matrix estimate for target distribution;
	    IF MOD(iter, &adapt_update)=0  THEN DO;
		  sdb[p] = 0;
          DO a = 1 TO &adapt_window;
            sdb[p] = SUM(sdb[p],(__rbl[p,a]-_rbl[p])**2/MIN(iter, &adapt_window));
	      END;
		  _scale[p]= _scale[p]*(_pa[p]/0.44);
          sdb[p] = SQRT(sdb[p])*_scale[p];
	    END;
	  END;
	END;
	rd=0;
    DO p = 1 TO npar;
      llp = 0;
      lp = 0;
      c[p] = ga[p]*RAND('NORMAL', 0, sdb[p]);
      DO j = 1 TO nobs; *trick to read in data multiple times;
        SET leuk POINT=j NOBS = nobs;
 		IF p=npar THEN rd = rd+(1/(1+EXP(-(LOG(popodds/studyodds) + lb[1] + lb[2])))-1/(1+EXP(-(LOG(popodds/studyodds) + (lb[1])))))/nobs*1000; *rd is lagged on iteration for simplicity;
        lpi = 1/(1+EXP(-(lb[1] + lb[2]*x)));
        pi = 1/(1+EXP(-(lb[1]+c[1] + (lb[2]+c[2])*x)));
        llp = llp + LOGPDF('BERNOULLI',y, lpi);
        lp = lp + LOGPDF('BERNOULLI',y, pi);
	  END;*J;
	  pa[p] = MIN(1,EXP(lp - llp));
      IF RAND('BERNOULLI', pa[p]) THEN DO;
        b[p] = lb[p] + c[p];
	  END;
      ELSE DO; 
        b[p] = lb[p];
		ga[p] = -1*ga[p];
	  END;
	  lb[p] = b[p];
	  c[p] = 0;
    END;*p;
    OUTPUT;
  END;*iter;
  STOP;
RUN;

PROC MEANS DATA = post MEAN STD MEDIAN MAXDEC=3;
  TITLE 'Target distribution statistics';
  WHERE burn = 0;
RUN;

